lua_shared_dict prometheus_metrics 10M;

init_worker_by_lua_block {
  prometheus = require("prometheus").init("prometheus_metrics")

  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"method", "scheme", "host", "path", "status", "server_name" })
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"method", "scheme", "host", "path", "status", "server_name"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
}

log_by_lua_block {
  metric_requests:inc(1, {ngx.var.request_method, ngx.var.scheme, ngx.var.host, ngx.unescape_uri(ngx.var.request_uri), ngx.var.status, ngx.var.server_name})
  metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.request_method, ngx.var.scheme, ngx.var.host, ngx.unescape_uri(ngx.var.request_uri), ngx.var.status, ngx.var.server_name})
}

server {
  listen 9145;
  location /metrics {
    content_by_lua_block {
      metric_connections:set(ngx.var.connections_reading, {"reading"})
      metric_connections:set(ngx.var.connections_waiting, {"waiting"})
      metric_connections:set(ngx.var.connections_writing, {"writing"})
      prometheus:collect()
    }
  }
}